<?php

class IndexController extends BaseController
{
    /**
     * Action name
     * @var string
     */
    public $name = 'index';

    /**
     * @var ArticleRepository
     */
    protected $articleRepository;

    public function __construct(ArticleRepository $articleRepository)
    {
        $this->articleRepository = $articleRepository;
    }

    protected function render($templateName, $vars = [])
    {
        return parent::render($templateName, $vars); // TODO: Change the autogenerated stub
    }

    public function indexAction(Request $request)
    {
        return new Response(
            $this->render('main', [
                '/' => []
            ])
        );
    }

    public function showAction(Request $request)
    {
        $id = $request->getQueryParameter("id");

        $article = is_numeric($id) ? $this->articleRepository->getById($id) : null;

        if ($article === null) {
            return new Response('Page not found <br><a href="/">back to articles list</a>',
                '404', 'Not found');
        }

        return new Response(
            $this->render('article', [
                'article' => $article
            ])
        );
    }

    public function loginAction(Request $request) {
        return new Response(
            $this->render('auth/login', [
            'title' => 'login page',
            'text' => ''
        ]));
    }

    /**
     * Возращает значение страницы аунтефекации.
    **/
    public function authAction(Request $request)
    {
        $pAccount = sprintf("%s", $_POST['login']);
        $password = sprintf("%s", $_POST['password']);

        setcookie('pAccount', $pAccount);
        setcookie('password', $password);
        return new Response('/', '301', 'homePage');
    }

    public function registrAction(Request $request) {
        return new Response(
            $this->render('auth/registr', [
            'title' => 'registr page',
            'text' => ''
        ]));
    }

    /***
     * форма добавления информации о счетчиках
     * @param Request $request
     * @return Response
     */
    public function addInfoAction(Request $request) {
        return new Response(
            $this->render('changeInfo', [
            'title' => 'Показания счетчиков',
            'text' => ''
        ]));
    }

    /***
     * добавить информацию о счетчиках
     * @param Request $request
     * @return Response
     */
    public function addAction(Request $request) {
        if ($request->isPost() && $request->getCountersValueBool())
        {
            $counterGVSid = $this->articleRepository->getIdCountersUD("GVS");
            $counterHVSid = $this->articleRepository->getIdCountersUD("HVS");
            $counterELEid = $this->articleRepository->getIdCountersUD("ELE");

            $newValueGVS = $request->getValueCounter("GVScounter");
            if(!is_numeric($newValueGVS) or $newValueGVS < 0)
            {
                return new Response(
                    $this->render('main', [
                        'title' => 'Основная страница',
                        'text' => '',
                        'error' => 'Показания счетчика GVS некорректны или меньше 0'
                    ]));
            }
            $newValueHVS = $request->getValueCounter("HVScounter");
            if(!is_numeric($newValueHVS) or $newValueHVS < 0)
            {
                return new Response(
                    $this->render('main', [
                        'title' => 'Основная страница',
                        'text' => '',
                        'error' => 'Показания счетчика HVS некорректны или меньше 0'
                    ]));
            }
            $newValueELE = $request->getValueCounter("ELEcounter");
            if(!is_numeric($newValueELE) or $newValueELE < 0)
            {
                return new Response(
                    $this->render('main', [
                        'title' => 'Основная страница',
                        'text' => '',
                        'error' => 'Показания счетчика ELE некорректны или меньше 0'
                    ]));
            }

            $prevValueGVS = $this->articleRepository->getPrevValueCounterUD($counterGVSid);
            $prevValueHVS = $this->articleRepository->getPrevValueCounterUD($counterHVSid);
            $prevValueELE = $this->articleRepository->getPrevValueCounterUD($counterELEid);

            $timeDate = $request->getValueCounter("dateTime");

            $this->articleRepository->addInfoUD($counterHVSid, $newValueHVS, $prevValueHVS[0]["curValue"], $timeDate);
            $this->articleRepository->addInfoUD($counterGVSid, $newValueGVS, $prevValueGVS[0]["curValue"], $timeDate);
            $this->articleRepository->addInfoUD($counterELEid, $newValueELE, $prevValueELE[0]["curValue"], $timeDate);
        }
        return new Response('/', '301', 'homePage');
    }

    public function createTicketAction()
    {
        $counterGVSid = $this->articleRepository->getIdCountersUD("GVS");
        $counterHVSid = $this->articleRepository->getIdCountersUD("HVS");
        $counterELEid = $this->articleRepository->getIdCountersUD("ELE");

        $GVS = $this->articleRepository->getByIdCounter($counterGVSid);
        $HVS = $this->articleRepository->getByIdCounter($counterHVSid);
        $ELE = $this->articleRepository->getByIdCounter($counterELEid);

        $values = [
            '1' => [
                'id' => $GVS[count($GVS) - 1]['idCount'],
                'curValue' => $GVS[count($GVS) - 1]['curValue'],
                'prevValue' => $GVS[count($GVS) - 1]['prevValue']
            ],
            '2' => [
                'id' => $HVS[count($HVS) - 1]['idCount'],
                'curValue' => $HVS[count($HVS) - 1]['curValue'],
                'prevValue' => $HVS[count($HVS) - 1]['prevValue']
            ],
            '3' => [
                'id' => $ELE[count($ELE) - 1]['idCount'],
                'curValue' => $ELE[count($ELE) - 1]['curValue'],
                'prevValue' => $ELE[count($ELE) - 1]['prevValue']
            ],
        ];

        return new Response(
            $this->render('ticket', [
                'title' => 'Квитанция',
                'values' => $values
            ]));
    }
}